import random
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '7815296787:AAGgMjQamSJekpVA2GIw1d2LC9Ne7glED8g'  # –¢–æ–∫–µ–Ω —Ç–µ—Å—Ç-–±–æ—Ç–∞
SECRET_CODE = "111111"
EMOJI_LIST = ["üíÄ", "‚ù§Ô∏è", "üò≠", "‚úÖ"]
MAIN_ADMIN_ID = 813096225  # –¢–≤–æ–π chat_id (—Ç–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤)
ALLOWED_USER_IDS = [813096225, 6614956958]  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
SUITS = ["‚ô•Ô∏è", "‚ô†Ô∏è", "‚ô£Ô∏è", "‚ô¶Ô∏è"]
SLOTS_SYMBOLS = ["üçí", "üçã", "üíé", "‚≠ê", "7Ô∏è‚É£"]

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_states = {}      # –°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_captcha, waiting_for_code, verified, playing, playing_slots
user_games = {}       # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã (–±–ª—ç–∫–¥–∂–µ–∫ –∏–ª–∏ —Å–ª–æ—Ç—ã)
user_wins = {}        # –°—á—ë—Ç—á–∏–∫ –ø–æ–±–µ–¥ (–±–ª—ç–∫–¥–∂–µ–∫)
user_captcha = {}     # –•—Ä–∞–Ω–∏—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–ø—á–∏
user_stats = {}       # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∏–≥—Ä—ã, –ø–æ–±–µ–¥—ã (–±–ª—ç–∫–¥–∂–µ–∫ –∏ —Å–ª–æ—Ç—ã)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç —Å –º–∞—Å—Ç—è–º–∏ (–±–ª—ç–∫–¥–∂–µ–∫)
def format_card(value):
    suit = random.choice(SUITS)
    if value == 11:
        return f"A{suit}"
    elif value == 10:
        return f"{random.choice(['J', 'Q', 'K'])}{suit}"
    else:
        return f"{value}{suit}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç
def format_hand(hand):
    return ", ".join(format_card(value) for value in hand)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ—á–∫–æ–≤ –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ
def calculate_score(hand):
    score = sum(hand)
    if 11 in hand and score > 21:
        hand[hand.index(11)] = 1
        score = sum(hand)
    return score

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è –±–ª—ç–∫–¥–∂–µ–∫–∞
def create_buttons():
    keyboard = [
        [KeyboardButton("Hit"), KeyboardButton("Stand"), KeyboardButton("I pass")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è —Å–ª–æ—Ç–æ–≤
def create_slots_buttons():
    keyboard = [
        [KeyboardButton("Spin"), KeyboardButton("Stop")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
def create_end_game_buttons():
    keyboard = [
        [KeyboardButton("Restart"), KeyboardButton("I pass")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞–ø—á–∏
def create_captcha_buttons():
    keyboard = [[KeyboardButton(emoji) for emoji in EMOJI_LIST]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
async def admin_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("üö´ Faqat adminlar uchun!")
        return
    if not ALLOWED_USER_IDS:
        await update.message.reply_text("üìã Ro'yxatda adminlar yo'q!")
        return
    message = "üìã S–ø–∏—Å–æ–∫ adminlar:\n"
    for i, uid in enumerate(ALLOWED_USER_IDS, 1):
        try:
            chat_info = await update.message.bot.get_chat(uid)
            username = chat_info.first_name or f"User {uid}"
        except:
            username = f"User {uid}"
        message += f"{i}. {username} ({uid})\n"
    await update.message.reply_text(message)

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ ALLOWED_USER_IDS (—Ç–æ–ª—å–∫–æ –¥–ª—è MAIN_ADMIN_ID)
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id != MAIN_ADMIN_ID:
        if chat_id in ALLOWED_USER_IDS:
            await update.message.reply_text("üö´ Faqat bosh admin qo'sha oladi!")
        else:
            await update.message.reply_text("üö´ Faqat adminlar uchun!")
        return
    try:
        new_user_id = int(context.args[0])
        if new_user_id not in ALLOWED_USER_IDS:
            ALLOWED_USER_IDS.append(new_user_id)
            await update.message.reply_text(f"‚úÖ Foydalanuvchi {new_user_id} qo'shildi!")
        else:
            await update.message.reply_text("üö´ Bu foydalanuvchi allaqachon ruxsatli!")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå Iltimos, to'g'ri chat_id kiriting: /add_user <chat_id>")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: —É–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ ALLOWED_USER_IDS
async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("üö´ Faqat adminlar uchun!")
        return
    try:
        user_id = int(context.args[0])
        if user_id in ALLOWED_USER_IDS:
            ALLOWED_USER_IDS.remove(user_id)
            await update.message.reply_text(f"‚úÖ Foydalanuvchi {user_id} o'chirildi!")
        else:
            await update.message.reply_text("üö´ Bu foydalanuvchi ruxsatli ro'yxatda yo'q!")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùå Iltimos, to'g'ri chat_id kiriting: /remove_user <chat_id>")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
async def set_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global SECRET_CODE
    chat_id = update.message.chat.id
    if chat_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("üö´ Faqat adminlar uchun!")
        return
    try:
        new_code = context.args[0]
        if new_code:
            SECRET_CODE = new_code
            await update.message.reply_text(f"‚úÖ Yangi parol o'rnatildi: {new_code}")
        else:
            await update.message.reply_text("‚ùå Parol bo'sh bo'lmasligi kerak!")
    except IndexError:
        await update.message.reply_text("‚ùå Iltimos, yangi parolni kiriting: /set_password <new_code>")

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
async def stats_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id not in ALLOWED_USER_IDS:
        await update.message.reply_text("üö´ Faqat adminlar uchun!")
        return
    if not user_stats:
        await update.message.reply_text("üìä Hozircha hech kim o'ynamadi!")
        return
    message = "üìä Barcha o'yinchilar statistikasi:\n"
    for uid in user_stats:
        stats = user_stats[uid]
        games = stats.get("games", 0)
        wins = stats.get("wins", 0)
        slots_games = stats.get("slots_games", 0)
        slots_wins = stats.get("slots_wins", 0)
        win_rate = (wins / games * 100) if games > 0 else 0
        slots_win_rate = (slots_wins / slots_games * 100) if slots_games > 0 else 0
        try:
            chat_info = await update.message.bot.get_chat(uid)
            username = chat_info.first_name or f"User {uid}"
        except:
            username = f"User {uid}"
        message += (
            f"{username}:\n"
            f"  Blackjack:\n"
            f"    O'yinlar: {games}\n"
            f"    G'alabalar: {wins}\n"
            f"    G'alaba foizi: {win_rate:.1f}%\n"
            f"  Slots:\n"
            f"    O'yinlar: {slots_games}\n"
            f"    G'alabalar: {slots_wins}\n"
            f"    G'alaba foizi: {slots_win_rate:.1f}%\n"
        )
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id not in user_stats:
        user_stats[chat_id] = {"games": 0, "wins": 0, "slots_games": 0, "slots_wins": 0}
    stats = user_stats[chat_id]
    games = stats.get("games", 0)
    wins = stats.get("wins", 0)
    slots_games = stats.get("slots_games", 0)
    slots_wins = stats.get("slots_wins", 0)
    win_rate = (wins / games * 100) if games > 0 else 0
    slots_win_rate = (slots_wins / slots_games * 100) if slots_games > 0 else 0
    await update.message.reply_text(
        f"üìä Sening statistikang:\n"
        f"üéÆ Blackjack:\n"
        f"  O'yinlar: {games}\n"
        f"  G'alabalar: {wins}\n"
        f"  G'alaba foizi: {win_rate:.1f}%\n"
        f"üé∞ Slots:\n"
        f"  O'yinlar: {slots_games}\n"
        f"  G'alabalar: {slots_wins}\n"
        f"  G'alaba foizi: {slots_win_rate:.1f}%"
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id in user_states and user_states[chat_id] == "verified":
        await update.message.reply_text("SIZ PAROLNI TOG'RI KIRITBOLDINGIZ")
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–ø—á—É –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if chat_id in ALLOWED_USER_IDS:
        user_states[chat_id] = "verified"
        user_wins[chat_id] = 0
        user_stats[chat_id] = {"games": 0, "wins": 0, "slots_games": 0, "slots_wins": 0}
        await update.message.reply_text(
            "‚úÖ TOG'RI SAN HALOLSAN ‚úÖ\n"
            "üÉè Boshlash uchun /blackjack yoki /slots yozing",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ø—á—É
    selected_emoji = random.choice(EMOJI_LIST)
    user_captcha[chat_id] = selected_emoji
    user_states[chat_id] = "waiting_for_captcha"

    await update.message.reply_text(
        "ASSALOMU ALAYKUM!\n"
        "‚úÖSIZ HALOL CAZINOGA HUSH KELIBSIZ‚úÖ\n"
        f"üîê Avval captcha'dan o'ting: quyidagi emojini tanlang: {selected_emoji}",
        reply_markup=create_captcha_buttons()
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ª–æ—Ç–æ–≤
async def slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if user_states.get(chat_id) != "verified":
        await update.message.reply_text("üö´ Avval to'g'ri kodni kiriting!", reply_markup=ReplyKeyboardRemove())
        return

    user_states[chat_id] = "playing_slots"
    user_stats[chat_id]["slots_games"] = user_stats.get(chat_id, {"slots_games": 0})["slots_games"] + 1

    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤
    await update.message.reply_text("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...")
    result = [random.choice(SLOTS_SYMBOLS) for _ in range(3)]
    for i in range(3):
        await asyncio.sleep(0.5)
        await update.message.reply_text(f"üé∞ [{result[0] if i >= 0 else '‚ùì'}] [{result[1] if i >= 1 else '‚ùì'}] [{result[2] if i >= 2 else '‚ùì'}]")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if result[0] == result[1] == result[2]:
        message = f"üéâ Pobeda katta! {result[0]}{result[1]}{result[2]}"
        user_stats[chat_id]["slots_wins"] = user_stats.get(chat_id, {"slots_wins": 0})["slots_wins"] + 1
    elif result[0] == result[1] or result[1] == result[2] or result[0] == result[2]:
        message = f"ü•≥ Yaxshi natija! {result[0]}{result[1]}{result[2]}"
        user_stats[chat_id]["slots_wins"] = user_stats.get(chat_id, {"slots_wins": 0})["slots_wins"] + 1
    else:
        message = f"üòî Omad yo'q: {result[0]}{result[1]}{result[2]}"

    await update.message.reply_text(
        f"{message}\n"
        f"üé∞ Yana o'ynash uchun 'Spin' yoki chiqish uchun 'Stop'",
        reply_markup=create_slots_buttons()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–∞–ø—á–∏ –∏ –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def check_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    text = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏
    if user_states.get(chat_id) == "waiting_for_captcha":
        expected_emoji = user_captcha.get(chat_id)
        if text == expected_emoji:
            user_states[chat_id] = "waiting_for_code"
            if chat_id in user_captcha:
                del user_captcha[chat_id]
            await update.message.reply_text(
                "‚ÄºÔ∏èBOSHLASH UCHUN KODNI KIRITING‚ÄºÔ∏è",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                f"Noto'g'ri emoji! Iltimos, quyidagi emojini tanlang: {expected_emoji}",
                reply_markup=create_captcha_buttons()
            )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_states.get(chat_id) == "waiting_for_code":
        if text == SECRET_CODE:
            user_states[chat_id] = "verified"
            user_wins[chat_id] = 0
            user_stats[chat_id] = {"games": 0, "wins": 0, "slots_games": 0, "slots_wins": 0}
            await update.message.reply_text(
                "‚úÖ TOG'RI SAN HALOLSAN ‚úÖ\n"
                "üÉè Boshlash uchun /blackjack yoki /slots yozing",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text("HAROMA CHIQ NAXUY")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–ª–æ—Ç–∞—Ö
    if user_states.get(chat_id) == "playing_slots":
        text = text.lower()
        if text == "spin":
            user_stats[chat_id]["slots_games"] = user_stats.get(chat_id, {"slots_games": 0})["slots_games"] + 1
            # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
            await update.message.reply_text("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...")
            result = [random.choice(SLOTS_SYMBOLS) for _ in range(3)]
            for i in range(3):
                await asyncio.sleep(0.5)
                await update.message.reply_text(f"üé∞ [{result[0] if i >= 0 else '‚ùì'}] [{result[1] if i >= 1 else '‚ùì'}] [{result[2] if i >= 2 else '‚ùì'}]")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result[0] == result[1] == result[2]:
                message = f"üéâ Pobeda katta! {result[0]}{result[1]}{result[2]}"
                user_stats[chat_id]["slots_wins"] = user_stats.get(chat_id, {"slots_wins": 0})["slots_wins"] + 1
            elif result[0] == result[1] or result[1] == result[2] or result[0] == result[2]:
                message = f"ü•≥ Yaxshi natija! {result[0]}{result[1]}{result[2]}"
                user_stats[chat_id]["slots_wins"] = user_stats.get(chat_id, {"slots_wins": 0})["slots_wins"] + 1
            else:
                message = f"üòî Omad yo'q: {result[0]}{result[1]}{result[2]}"

            await update.message.reply_text(
                f"{message}\n"
                f"üé∞ Yana o'ynash uchun 'Spin' yoki chiqish uchun 'Stop'",
                reply_markup=create_slots_buttons()
            )
            return
        elif text == "stop":
            user_states[chat_id] = "verified"
            await update.message.reply_text(
                "üé∞ Slotidan chiqdingiz!\n"
                "/blackjack yoki /slots ni tanlang",
                reply_markup=create_end_game_buttons()
            )
            return
        else:
            await update.message.reply_text(
                "Iltimos, faqat 'Spin' yoki 'Stop' ni tanlang.",
                reply_markup=create_slots_buttons()
            )
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–ª—ç–∫–¥–∂–µ–∫–µ
    if user_states.get(chat_id) == "playing":
        if chat_id not in user_games:
            await update.message.reply_text(
                "üßê O'yin topilmadi. /blackjack yozib qayta boshlang.",
                reply_markup=ReplyKeyboardRemove()
            )
            user_states[chat_id] = "verified"
            return

        game = user_games[chat_id]
        text = text.lower()

        if text == "hit":
            if not game['deck']:
                await update.message.reply_text(
                    "üÉè Koloda bo'sh! O'yin tugadi.",
                    reply_markup=create_end_game_buttons()
                )
                user_states[chat_id] = "verified"
                user_stats[chat_id]["games"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["games"] + 1
                del user_games[chat_id]
                return

            await update.message.reply_text("üÉè Razda—ë–º kartu...")
            await asyncio.sleep(1)
            card = random.choice(game['deck'])
            game['deck'].remove(card)
            game['player'].append(card)

            score = calculate_score(game['player'])
            formatted_card = format_card(card)
            await update.message.reply_text(
                f"üÉè Yangi karta: {formatted_card}\n"
                f"Sizning ochko: {score}"
            )

            if score > 21:
                await update.message.reply_text(
                    "‚ùå Siz yutqazdingiz! 21 dan oshdi.",
                    reply_markup=create_end_game_buttons()
                )
                user_states[chat_id] = "verified"
                user_stats[chat_id]["games"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["games"] + 1
                del user_games[chat_id]
            return

        elif text == "stand":
            player_score = calculate_score(game['player'])
            dealer_score = calculate_score(game['dealer'])

            while dealer_score < 17 and game['deck']:
                card = random.choice(game['deck'])
                game['deck'].remove(card)
                game['dealer'].append(card)
                dealer_score = calculate_score(game['dealer'])

            formatted_player = format_hand(game['player'])
            formatted_dealer = format_hand(game['dealer'])
            user_stats[chat_id]["games"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["games"] + 1

            if dealer_score > 21:
                result = "‚úÖ Siz yutdingiz! Diler 21 dan oshdi!"
                user_wins[chat_id] = user_wins.get(chat_id, 0) + 1
                user_stats[chat_id]["wins"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["wins"] + 1
            else:
                result = (
                    f"Sizning kartalaringiz: {formatted_player} ({player_score})\n"
                    f"Dilerning kartalaringiz: {formatted_dealer} ({dealer_score})\n"
                )
                if dealer_score > player_score:
                    result += "‚ùå Siz yutqazdingiz!"
                elif player_score == dealer_score:
                    result += "ü§ù Durrang!"
                else:
                    result += "‚úÖ Siz yutdingiz!"
                    user_wins[chat_id] = user_wins.get(chat_id, 0) + 1
                    user_stats[chat_id]["wins"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["wins"] + 1

            await update.message.reply_text(result)
            await update.message.reply_text(
                f"üèÜ Sening g'alabalaringiz: {user_wins.get(chat_id, 0)}",
                reply_markup=create_end_game_buttons()
            )
            user_states[chat_id] = "verified"
            del user_games[chat_id]
            return

        elif text == "i pass":
            await update.message.reply_text(
                "Siz o'zingizni topshirdingiz. Diler g'olib!",
                reply_markup=create_end_game_buttons()
            )
            user_states[chat_id] = "verified"
            user_stats[chat_id]["games"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["games"] + 1
            if chat_id in user_games:
                del user_games[chat_id]
            return

        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
        await update.message.reply_text(
            "Iltimos, faqat 'Hit', 'Stand' yoki 'I pass' ni tanlang.",
            reply_markup=create_buttons()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ Restart –≤–Ω–µ –∏–≥—Ä—ã
    elif text.lower() == "restart" and user_states.get(chat_id) == "verified":
        await restart(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ I pass –≤–Ω–µ –∏–≥—Ä—ã
    elif text.lower() == "i pass" and user_states.get(chat_id) == "verified":
        await update.message.reply_text(
            "üéÆ O'yin tanlang: /blackjack yoki /slots",
            reply_markup=create_end_game_buttons()
        )
        return

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
async def check_blackjack(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    game = user_games[chat_id]
    player_score = calculate_score(game['player'])

    if player_score == 21 and len(game['player']) == 2:
        if len(game['deck']) > 0:
            card = random.choice(game['deck'])
            game['deck'].remove(card)
            game['dealer'].append(card)
        else:
            await update.message.reply_text(
                "üÉè Koloda bo'sh! O'yin tugadi.",
                reply_markup=create_end_game_buttons()
            )
            user_states[chat_id] = "verified"
            user_stats[chat_id]["games"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["games"] + 1
            del user_games[chat_id]
            return False

        dealer_score = calculate_score(game['dealer'])
        formatted_player = format_hand(game['player'])
        formatted_dealer = format_hand(game['dealer'])
        user_stats[chat_id]["games"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["games"] + 1

        if dealer_score == 21 and len(game['dealer']) == 2:
            await update.message.reply_text(
                f"üÉè Sizning kartalaringiz: {formatted_player} (Blackjack!)\n"
                f"Dilerning kartasi: {formatted_dealer} (Blackjack!)\n"
                "ü§ù Durrang!",
                reply_markup=create_end_game_buttons()
            )
        else:
            await update.message.reply_text(
                f"üÉè Sizning kartalaringiz: {formatted_player} (Blackjack!)\n"
                f"Dilerning kartasi: {formatted_dealer}\n"
                "‚úÖ Siz yutdingiz!",
                reply_markup=create_end_game_buttons()
            )
            user_wins[chat_id] = user_wins.get(chat_id, 0) + 1
            user_stats[chat_id]["wins"] = user_stats.get(chat_id, {"games": 0, "wins": 0})["wins"] + 1

        user_states[chat_id] = "verified"
        del user_games[chat_id]
        return True
    return False

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–ª—ç–∫–¥–∂–µ–∫–∞
async def blackjack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if user_states.get(chat_id) != "verified":
        await update.message.reply_text("üö´ Avval to'g'ri kodni kiriting!", reply_markup=ReplyKeyboardRemove())
        return

    # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–¥—É
    deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
    random.shuffle(deck)
    player = [deck.pop(), deck.pop()]
    dealer = [deck.pop()]

    user_games[chat_id] = {
        "deck": deck,
        "player": player,
        "dealer": dealer
    }

    user_states[chat_id] = "playing"
    score = calculate_score(player)

    # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–¥–∞—á–∏
    formatted_player = format_hand([player[0]])
    await update.message.reply_text(f"üÉè Birinchi karta: {formatted_player}")
    await asyncio.sleep(1)
    formatted_player = format_hand([player[1]])
    await update.message.reply_text(f"üÉè Ikkinchi karta: {formatted_player}")
    await asyncio.sleep(1)
    formatted_dealer = format_card(dealer[0])
    await update.message.reply_text(
        f"üÉè Sizning kartalaringiz: {format_hand(player)}\n"
        f"Sizning ochko: {score}\n\n"
        f"Dilerning kartasi: {formatted_dealer} ‚ùì‚ùì\n"
        "Yozing: 'Hit' (yana karta), 'Stand' (to'xtash) yoki 'I pass' (sdat'sya)",
        reply_markup=create_buttons()
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
    await check_blackjack(update, context, chat_id)

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã (–±–ª—ç–∫–¥–∂–µ–∫)
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if user_states.get(chat_id) != "verified":
        await update.message.reply_text("üö´ Avval to'g'ri kodni kiriting!", reply_markup=ReplyKeyboardRemove())
        return

    # –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–¥—É
    deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
    random.shuffle(deck)
    player = [deck.pop(), deck.pop()]
    dealer = [deck.pop()]

    user_games[chat_id] = {
        "deck": deck,
        "player": player,
        "dealer": dealer
    }

    user_states[chat_id] = "playing"
    score = calculate_score(player)

    # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–¥–∞—á–∏
    formatted_player = format_hand([player[0]])
    await update.message.reply_text(f"üÉè Birinchi karta: {formatted_player}")
    await asyncio.sleep(1)
    formatted_player = format_hand([player[1]])
    await update.message.reply_text(f"üÉè Ikkinchi karta: {formatted_player}")
    await asyncio.sleep(1)
    formatted_dealer = format_card(dealer[0])
    await update.message.reply_text(
        f"üÉè Sizning kartalaringiz: {format_hand(player)}\n"
        f"Sizning ochko: {score}\n\n"
        f"Dilerning kartasi: {formatted_dealer} ‚ùì‚ùì\n"
        "Yozing: 'Hit' (yana karta), 'Stand' (to'xtash) yoki 'I pass' (sdat'sya)",
        reply_markup=create_buttons()
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
    await check_blackjack(update, context, chat_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("blackjack", blackjack))
    app.add_handler(CommandHandler("slots", slots))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("admin_list", admin_list))
    app.add_handler(CommandHandler("add_user", add_user))
    app.add_handler(CommandHandler("remove_user", remove_user))
    app.add_handler(CommandHandler("set_password", set_password))
    app.add_handler(CommandHandler("stats_all", stats_all))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_code))

    print("–•–∞–ª–æ–ª –ö–∞–∑–∏–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ üé∞")
    app.run_polling()

# –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ–Ω–µ–≥ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
"""
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
user_balances = {}  # –ë–∞–ª–∞–Ω—Å —Ö–∞–ª–æ–ª-–∫–æ–∏–Ω–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞–≤–æ–∫
def create_bet_buttons():
    keyboard = [
        [KeyboardButton("10"), KeyboardButton("50")],
        [KeyboardButton("100"), KeyboardButton("500")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /balance
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id not in user_balances:
        user_balances[chat_id] = 1000
    await update.message.reply_text(f"üí∞ Sening halol-coinlaring: {user_balances[chat_id]}")

# –ö–æ–º–∞–Ω–¥–∞ /top
async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_balances:
        await update.message.reply_text("üìä Hozircha hech kim o'ynamadi!")
        return
    sorted_balances = sorted(user_balances.items(), key=lambda x: x[1], reverse=True)[:5]
    message = "üèÜ Top-5 o'yinchilar:\n"
    for i, (chat_id, balance) in enumerate(sorted_balances, 1):
        username = (await update.message.bot.get_chat(chat_id)).first_name or f"User {chat_id}"
        message += f"{i}. {username} ‚Äî {balance} halol-coin\n"
    await update.message.reply_text(message)

# –í /start –¥–ª—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
user_balances[chat_id] = 1000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

# –í /start –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø–∞—Ä–æ–ª—è:
user_balances[chat_id] = 1000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å

# –í check_code –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_bet:
if user_states.get(chat_id) == "waiting_for_bet":
    try:
        bet = int(text)
        if bet not in [10, 50, 100, 500]:
            await update.message.reply_text(
                "Iltimos, faqat 10, 50, 100 yoki 500 coin tanlang!",
                reply_markup=create_bet_buttons()
            )
            return
        if user_balances.get(chat_id, 1000) < bet:
            await update.message.reply_text(
                "üí∞ Coinlaringiz yetmaydi! +500 coin bonus beramiz!",
                reply_markup=ReplyKeyboardRemove()
            )
            user_balances[chat_id] = user_balances.get(chat_id, 1000) + 500
            user_states[chat_id] = "verified"
            return
        user_games[chat_id]["bet"] = bet
        user_states[chat_id] = "playing"
        await start_blackjack(update, context, chat_id)
    except ValueError:
        await update.message.reply_text(
            "Iltimos, faqat 10, 50, 100 yoki 500 coin tanlang!",
            reply_markup=create_bet_buttons()
        )
        return

# –í blackjack –∏ restart:
if chat_id not in user_balances or user_balances[chat_id] < 10:
    user_balances[chat_id] = user_balances.get(chat_id, 0) + 500
    await update.message.reply_text(
        "üí∞ Coinlaringiz yetmaydi! +500 coin bonus beramiz!",
        reply_markup=ReplyKeyboardRemove()
    )
user_games[chat_id]["bet"] = 0  # –°—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
user_states[chat_id] = "waiting_for_bet"
await update.message.reply_text(
    f"üí∞ Balans: {user_balances[chat_id]} coin\n"
    "Qancha stavka qo'yasiz? (10, 50, 100, 500)",
    reply_markup=create_bet_buttons()
)

# –í Hit:
bet = game["bet"]
user_stats[chat_id]["games"] += 1
user_balances[chat_id] -= bet

# –í Stand:
bet = game["bet"]
user_stats[chat_id]["games"] += 1
if dealer_score > 21:
    result = f"‚úÖ Siz yutdingiz! Diler 21 dan oshdi!\n+{2 * bet} coin"
    user_balances[chat_id] += 2 * bet
else:
    if dealer_score > player_score:
        result += f"‚ùå Siz yutqazdingiz! -{bet} coin"
        user_balances[chat_id] -= bet
    elif player_score == dealer_score:
        result += "ü§ù Durrang! Coinlar qaytarildi."
    else:
        result += f"‚úÖ Siz yutdingiz! +{2 * bet} coin"
        user_balances[chat_id] += 2 * bet
await update.message.reply_text(
    f"üèÜ Sening g'alabalaringiz: {user_wins[chat_id]}\n"
    f"üí∞ Balans: {user_balances[chat_id]} coin",
    reply_markup=create_end_game_buttons()
)

# –í I pass:
bet = game["bet"]
await update.message.reply_text(
    f"Siz o'zingizni topshirdingiz. Diler g'olib! -{bet} coin",
    reply_markup=create_end_game_buttons()
)
user_stats[chat_id]["games"] += 1
user_balances[chat_id] -= bet

# –í check_blackjack:
bet = game["bet"]
user_stats[chat_id]["games"] += 1
if dealer_score == 21 and len(game['dealer']) == 2:
    await update.message.reply_text(
        f"üÉè Sizning kartalaringiz: {formatted_player} (Blackjack!)\n"
        f"Dilerning kartasi: {formatted_dealer} (Blackjack!)\n"
        "ü§ù Durrang! Coinlar qaytarildi.",
        reply_markup=create_end_game_buttons()
    )
else:
    await update.message.reply_text(
        f"üÉè Sizning kartalaringiz: {formatted_player} (Blackjack!)\n"
        f"Dilerning kartasi: {formatted_dealer}\n"
        f"‚úÖ Siz yutdingiz! +{3 * bet} coin",
        reply_markup=create_end_game_buttons()
    )
    user_balances[chat_id] += 3 * bet

# –í stats –¥–æ–±–∞–≤–∏—Ç—å:
max_win = stats["max_win"]
f"üí∞ Maksimal yutuq: {max_win} halol-coin"
user_stats[chat_id]["max_win"] = max(user_stats[chat_id]["max_win"], 2 * bet)  # –∏–ª–∏ 3 * bet –¥–ª—è –±–ª—ç–∫–¥–∂–µ–∫–∞
"""
